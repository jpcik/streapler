package rsp.vocab

import rsp.data._
import rsp.data.RdfTools._

object SSN extends Vocab {
  override val iri: Iri = "http://purl.oclc.org/NET/ssnx/ssn#"
  val hasMeasurementCapability = SSN("hasMeasurementCapability")
  val startTime = SSN("startTime")
  val observedBy = SSN("observedBy")
  val deployedSystem = SSN("deployedSystem")
  val hasOperatingRange = SSN("hasOperatingRange")
  val hasProperty = SSN("hasProperty")
  val madeObservation = SSN("madeObservation")
  val onPlatform = SSN("onPlatform")
  val inCondition = SSN("inCondition")
  val hasInput = SSN("hasInput")
  val attachedSystem = SSN("attachedSystem")
  val observedProperty = SSN("observedProperty")
  val isProxyFor = SSN("isProxyFor")
  val qualityOfObservation = SSN("qualityOfObservation")
  val featureOfInterest = SSN("featureOfInterest")
  val hasMeasurementProperty = SSN("hasMeasurementProperty")
  val deploymentProcessPart = SSN("deploymentProcessPart")
  val isPropertyOf = SSN("isPropertyOf")
  val endTime = SSN("endTime")
  val implementedBy = SSN("implementedBy")
  val hasSubSystem = SSN("hasSubSystem")
  val forProperty = SSN("forProperty")
  val observes = SSN("observes")
  val deployedOnPlatform = SSN("deployedOnPlatform")
  val ofFeature = SSN("ofFeature")
  val implements = SSN("implements")
  val inDeployment = SSN("inDeployment")
  val hasSurvivalProperty = SSN("hasSurvivalProperty")
  val hasValue = SSN("hasValue")
  val detects = SSN("detects")
  val observationSamplingTime = SSN("observationSamplingTime")
  val observationResult = SSN("observationResult")
  val hasOutput = SSN("hasOutput")
  val observationResultTime = SSN("observationResultTime")
  val sensingMethodUsed = SSN("sensingMethodUsed")
  val isProducedBy = SSN("isProducedBy")
  val hasOperatingProperty = SSN("hasOperatingProperty")
  val hasSurvivalRange = SSN("hasSurvivalRange")
  val hasDeployment = SSN("hasDeployment")
  val Accuracy = SSN("Accuracy")
  val DetectionLimit = SSN("DetectionLimit")
  val Frequency = SSN("Frequency")
  val Condition = SSN("Condition")
  val SensorOutput = SSN("SensorOutput")
  val Precision = SSN("Precision")
  val Resolution = SSN("Resolution")
  val FeatureOfInterest = SSN("FeatureOfInterest")
  val Sensor = SSN("Sensor")
  val OperatingProperty = SSN("OperatingProperty")
  val OperatingPowerRange = SSN("OperatingPowerRange")
  val MaintenanceSchedule = SSN("MaintenanceSchedule")
  val Sensing = SSN("Sensing")
  val Latency = SSN("Latency")
  val SurvivalRange = SSN("SurvivalRange")
  val SensingDevice = SSN("SensingDevice")
  val Sensitivity = SSN("Sensitivity")
  val Stimulus = SSN("Stimulus")
  val MeasurementRange = SSN("MeasurementRange")
  val System = SSN("System")
  val SystemLifetime = SSN("SystemLifetime")
  val Property = SSN("Property")
  val MeasurementProperty = SSN("MeasurementProperty")
  val Process = SSN("Process")
  val Deployment = SSN("Deployment")
  val MeasurementCapability = SSN("MeasurementCapability")
  val BatteryLifetime = SSN("BatteryLifetime")
  val Input = SSN("Input")
  val Drift = SSN("Drift")
  val DeploymentRelatedProcess = SSN("DeploymentRelatedProcess")
  val SensorInput = SSN("SensorInput")
  val ResponseTime = SSN("ResponseTime")
  val ObservationValue = SSN("ObservationValue")
  val SensorDataSheet = SSN("SensorDataSheet")
  val Observation = SSN("Observation")
  val Selectivity = SSN("Selectivity")
  val SurvivalProperty = SSN("SurvivalProperty")
  val Device = SSN("Device")
  val OperatingRange = SSN("OperatingRange")
  val Output = SSN("Output")
  val Platform = SSN("Platform")
}
